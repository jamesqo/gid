#!/bin/bash

function help {
    echo 'gid adds, commits, and pushes your changes in a single command.'
    echo
    echo 'Usage: gid [directory]'
    echo 'cd to [directory] and git add/commit/pull/push everything all in one go.'
    echo
    echo 'Options:'
    echo '-b,--branch BRANCH            Set branch to be checked out. By default this is master.'
    echo '-f,--force                    Force push/pull any conflicting changes.'
    echo "-l,--lazy                     Set commit message to '$default_message.'"
    echo '-m,--message MESSAGE          Set MESSAGE as the git commit message.'
    echo '-r,--remote REMOTE            Push to REMOTE during git push. By default this is origin.'
}

function error {
    echo "$@" 1>&2
}

function try_run {
    bash -c "$@"
    exit_code=$?
    if [ $exit_code -ne 0 ]; then
        error "$* failed! Exit code: $exit_code"
        exit $exit_code
    fi
}

branch='master'
default_message='Automatically committed by gid'
directory='.'
force=''
message=''
remote='origin'

# Get options
while [ $# -gt 0 ]
do
    case "$1" in
        '-?'|-h|--help) # ? matches a single character by default, we don't want this behavior
        help
        exit 0
        ;;
        -b|--branch)
        branch="$2"
        shift
        ;;
        -f|--force)
        force='-f'
        ;;
        -l|--lazy)
        message="$default_message"
        ;;
        -m|--message)
        message="$2"
        shift
        ;;
        -r|--remote)
        remote="$2"
        shift
        ;;
        --) # Stop parsing
        shift
        directory="$@"
        break # From outer loop
        ;;
        *)
        directory="$1"
        ;;
    esac
    shift
done

# Where the real work starts
try_run "cd '$directory' 2> /dev/null"
original_branch=$(try_run 'git rev-parse --abbrev-ref HEAD')

if [ "$original_branch" != "$branch" ]; then
    try_run "git checkout $branch"
fi

try_run 'git add -A :'

if [ -z "$message" ]; then
    try_run 'git commit'
else
    try_run "git commit -m '$message'"
fi

try_run "git pull $force $remote $branch"
try_run "git push $force $remote $branch"

if [ "$original_branch" != "$branch" ]; then
    try_run "git checkout $original_branch"
fi
